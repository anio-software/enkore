import path from "node:path"
import {scandir} from "@anio-software/fs"

export default async function(fourtune_session) {
	//
	// src/auto files will be provided virtually
	// since some of the auto-generated files might not exist on
	// disk yet
	//
	fourtune_session.source_files = await scandir(
		path.join(fourtune_session.project.root, "src"), {
			filter({type, parents}) {
				if (type !== "file") return false

				if (parents.length && parents[0] === "auto") return false

				return true
			}
		}
	)

	//
	// examine config.autogenerate:
	//
	// do this before initializeTarget() so that initializeTarget()
	// can examine what files will be auto-generated by fourtune
	//
	//
	if ("autogenerate" in fourtune_session.project.config) {
		let autogenerate = []

		if (!Array.isArray(fourtune_session.project.config.autogenerate)) {
			for (const file in fourtune_session.project.config.autogenerate) {
				autogenerate.push({
					create: file,
					from: fourtune_session.project.config.autogenerate[file]
				})
			}
		}

		for (const entry of autogenerate) {
			fourtune_session.files_to_autogenerate.push({
				file_path: entry.create,
				async generateFileSourceCode() {
					return await entry.from(fourtune_session.public_interface)
				}
			})
		}
	}

	await fourtune_session.target_integration.initializeTarget(
		fourtune_session.public_interface
	)

	fourtune_session.target_hooks_locked = true
}
