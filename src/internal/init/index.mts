import type {InternalSession} from "../InternalSession.d.mts"
import path from "node:path"

import {removeObsoleteAutoGeneratedFiles} from "./removeObsoleteAutoGeneratedFiles.mts"
import {createAutoGeneratedFiles} from "./createAutoGeneratedFiles.mts"
import {scandir, writeAtomicFile, writeAtomicFileJSON} from "@aniojs/node-fs"
import {cleanup} from "./cleanup.mts"
import {replicateDirectoryTree} from "./replicateDirectoryTree.mts"
import {preprocessFiles} from "./preprocessFiles.mts"

import {readEntityJSONFile, type EnkoreLockFile} from "@enkore/spec"

async function checkAutoGeneratedFilesCI(
	session: InternalSession,
	lockFileData: EnkoreLockFile
) {
	const sz1 = session.filesToAutoGenerate.size
	const sz2 = Object.keys(lockFileData.autogeneratedFiles).length

	if (sz1 !== sz2) {
		throw new Error(
			`Expected number of hashes to match number of autogenerated files:\n\n` +
			`Expected number: ${sz1}\n` +
			`Actual number  : ${sz2}\n`
		)
	}

	for (const path in lockFileData.autogeneratedFiles) {
		const expectedHash = lockFileData.autogeneratedFiles[path].hash

		if (!session.filesToAutoGenerate.has(path)) {
			throw new Error(
				`No hash entry for auto generated file '${path}'.`
			)
		}

		const actualHash = session.filesToAutoGenerate.get(path)!.outputHash

		if (expectedHash !== actualHash) {
			throw new Error(
				`Hash mismatch`
			)
		}
	}
}

export async function init(
	session: InternalSession
) {
	await removeObsoleteAutoGeneratedFiles(session)
	await createAutoGeneratedFiles(session)

	session.projectDirectoryEntries = await scandir(
		path.join(session.projectRoot, "project")
	)

	session.productNames = (
		await session.realmIntegrationAPI.initialize(session.publicAPI)
	).products.map(x => x.name)

	await cleanup(session)
	await replicateDirectoryTree(session)
	await preprocessFiles(session)

	const lockFilePath = path.join(session.projectRoot, "enkore-lock.json")

	const lockFileData = await readEntityJSONFile(
		lockFilePath, "EnkoreLockFile"
	)

	if (session.options.isCIEnvironment) {
		await checkAutoGeneratedFilesCI(session, lockFileData)

		return
	}

	lockFileData.autogeneratedFiles = {}

	let gitIgnoreSection = ``

	gitIgnoreSection += `# This file is automatically managed by enkore\n`
	gitIgnoreSection += `# DO NOT ADD ENTRIES HERE, THEY WILL BE REMOVED\n\n`

	for (const [_, file] of session.filesToAutoGenerate.entries()) {
		gitIgnoreSection += `/${file.normalizedDestinationPath}\n`

		lockFileData.autogeneratedFiles[file.normalizedDestinationPath] = {
			hash: file.outputHash!
		}
	}

	await writeAtomicFileJSON(
		lockFilePath, lockFileData, {pretty: true}
	)

	await writeAtomicFile(
		path.join(session.projectRoot, "project", ".gitignore"), gitIgnoreSection
	)
}
