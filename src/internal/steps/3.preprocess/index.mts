import type {Preprocess} from "#~synthetic/user/Steps.d.mts"
import {_replicateDirectoryTree} from "#~src/internal/_replicateDirectoryTree.mts"
import {preprocessSingleFile} from "./preprocessSingleFile.mts"
import init from "../4.init/index.mts"
import {defineStepChecked} from "../defineStepChecked.mts"
import path from "node:path"
import {scandirExt, type ScandirEntry} from "@anio-software/pkg.node-fs"
import {createEntity, type EnkoreProjectFile} from "@anio-software/enkore-private.spec"
import {isFunction} from "@anio-software/pkg.is"
import {createAutogeneratedFile} from "../2.autogenerate/createAutogeneratedFile.mts"

const executeStep: Preprocess = async function(session) {
	const projectFilesOnDiskByRelativePath: Map<string, ScandirEntry> = new Map()

	const {
		entries,
		createScandirEntryFromPath: createScandirEntryFromPathProject
	} = await scandirExt(
		path.join(session.projectRoot, "project"), {
			filter(entry) {
				return entry.type === "regularFile"
			}
		}
	)

	for (const entry of entries) {
		projectFilesOnDiskByRelativePath.set(entry.relative_path, entry)

		//
		// ignore project root .gitignore file
		// because we are maintaining it from this package here
		//
		if (entry.relative_path === ".gitignore") continue

		const projectFile = createEntity("EnkoreProjectFile", 0, 0, {
			absolutePath: entry.absolute_path,
			relativePath: entry.relative_path,
			fileName: entry.name,
			wasAutogenerated: session.state.filesToAutogenerate.has(
				path.join("project", entry.relative_path)
			),
			wasFiltered: false
		})

		projectFile.wasFiltered = await getWasFilteredValue(projectFile)
		session.state.projectFiles.set(entry.relative_path, projectFile)
	}

	await _replicateDirectoryTree(session.projectRoot, projectFilesOnDiskByRelativePath)

	// we don't care about the entries because
	// the build/ folder doesn't contain any files yet
	const {
		createScandirEntryFromPath: createScandirEntryFromPathBuild
	} = await scandirExt(
		path.join(session.projectRoot, "build")
	)

	for (const [_, projectFile] of session.state.projectFiles.entries()) {
		await preprocessFile(projectFile)
	}

	// --- generate late autogenerated files here --- //
	for (const [_, file] of session.state.filesToAutogenerate.entries()) {
		// todo: refactor into function
		if (!file.generateAfterPreprocessing) continue

		session.emitMessage(
			`info`, `generating late autogenerated file '${file.normalizedDestinationPath}'.`
		)

		const result = await createAutogeneratedFile(session, file)

		if (result === false) continue

		file.output = result.output
		file.outputHash = result.outputHash

		const projectFile = createEntity("EnkoreProjectFile", 0, 0, {
			absolutePath: path.join(session.projectRoot, file.normalizedDestinationPath),
			relativePath: file.normalizedDestinationPath.slice("project/".length),
			fileName: path.basename(file.normalizedDestinationPath),
			wasAutogenerated: true,
			wasFiltered: false
		})

		projectFile.wasFiltered = await getWasFilteredValue(projectFile)

		//
		// autogenerated file might create new folders inside project/
		// sync those to build/ and objects/
		//
		await _replicateDirectoryTree(
			session.projectRoot, new Map([
				[projectFile.relativePath, createScandirEntryFromPathProject(
					projectFile.absolutePath
				)]
			])
		)

		await preprocessFile(projectFile)

		session.state.projectFiles.set(projectFile.relativePath, projectFile)
	}

	return {
		init: async function() {
			return await init.runStep(session)
		}
	}

	async function getWasFilteredValue(projectFile: EnkoreProjectFile) {
		if (isFunction(session.targetIntegrationAPI.projectSourceFileFilter)) {
			const filter = session.targetIntegrationAPI.projectSourceFileFilter
			const keepFile = await filter(session.publicAPI, projectFile)

			return !keepFile
		}

		return false
	}

	async function preprocessFile(projectFile: EnkoreProjectFile) {
		const buildFiles = await preprocessSingleFile(session, projectFile)

		for (const [_, buildFile] of buildFiles.entries()) {
			session.state.buildFilesCreatedByPreprocessingStageByRelativePath.set(
				buildFile.relativePath,
				createScandirEntryFromPathBuild(buildFile.absolutePath)
			)

			session.state.buildFiles.set(
				buildFile.relativePath,
				createEntity("EnkoreBuildFile", 0, 0, {
					absolutePath: buildFile.absolutePath,
					relativePath: buildFile.relativePath,
					fileName: buildFile.fileName
				})
			)
		}
	}
}

export default defineStepChecked("preprocess", executeStep)
