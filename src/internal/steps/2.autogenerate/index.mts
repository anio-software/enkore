import type {Autogenerate} from "#~synthetic/user/Steps.d.mts"
import type {EnkoreProjectFile} from "@anio-software/enkore-private.spec"
import {createAutogeneratedFile} from "./createAutogeneratedFile.mts"
import {scandir} from "@aniojs/node-fs"
import path from "node:path"
import preprocess from "../3.preprocess/index.mts"
import {defineStepChecked} from "../defineStepChecked.mts"
import {scandirEntryToEntityFactory} from "#~src/internal/scandirEntryToEntityFactory.mts"

const executeStep: Autogenerate = async function(session) {
	for (const [_, file] of session.state.filesToAutogenerate.entries()) {
		if (file.generateAfterPreprocessing) {
			session.emitMessage(
				`info`, `autogenerated file '${file.normalizedDestinationPath}' will be created after preprocessing.`
			)

			continue
		}

		const result = await createAutogeneratedFile(session, file)

		if (result === false) continue

		file.output = result.output
		file.outputHash = result.outputHash
	}

	// vvvvv needs to be moved to preprocess stage vvvvv //
	const projectDirectoryEntries = await scandir(
		path.join(session.projectRoot, "project")
	)

	const scandirEntryToEntity = scandirEntryToEntityFactory(session.state)
	const allProjectFiles = projectDirectoryEntries.filter(entry => {
		//
		// ignore project root .gitignore file
		// because we are maintaining it from this package here
		//
		if (entry.relative_path === ".gitignore") return false

		return entry.type === "regularFile"
	}).map(scandirEntryToEntity)

	let filteredProjectFiles : EnkoreProjectFile[]  = []

	function markProjectFileAsFiltered(filePath: string) {
		for (const projectFile of allProjectFiles) {
			if (projectFile.absolutePath === filePath) {
				projectFile.wasFiltered = true

				return
			}
		}
	}

	if (typeof session.targetIntegrationAPI.projectSourceFileFilter === "function") {
		const filter = session.targetIntegrationAPI.projectSourceFileFilter
		const tmp : EnkoreProjectFile[]  = []

		for (const projectFile of allProjectFiles) {
			const keep = await filter(session.publicAPI, projectFile)

			if (!keep) {
				// i might have to change this in the future
				// dependening on the performance

				markProjectFileAsFiltered(projectFile.absolutePath)

				continue
			}

			tmp.push(projectFile)
		}

		filteredProjectFiles = tmp
	} else {
		filteredProjectFiles = allProjectFiles
	}

	session.state.projectDirectoryEntries = projectDirectoryEntries
	session.state.allProjectFiles = allProjectFiles
	session.state.filteredProjectFiles = filteredProjectFiles
	// ^^^^^ needs to be moved to preprocess stage ^^^^^ //

	return {
		preprocess: async function() {
			return await preprocess.runStep(session)
		}
	}
}

export default defineStepChecked("autogenerate", executeStep)
