import type {InternalSession} from "#~src/internal/InternalSession.d.mts"
import type {Autogenerate} from "../Steps.d.mts"
import {createAutogeneratedFiles} from "./createAutogeneratedFiles.mts"
import {scandir} from "@aniojs/node-fs"
import path from "node:path"
import preprocess from "../3.preprocess/index.mts"
import {readEnkoreLockFile} from "@enkore/common"
import {defineStep} from "../defineStep.mts"

async function checkAutogeneratedFilesCI(
	session: InternalSession
) {
	const lockFileData = await readEnkoreLockFile(session.projectRoot)

	const sz1 = session.state.filesToAutogenerate.size
	const sz2 = Object.keys(lockFileData.autogeneratedFiles).length

	if (sz1 !== sz2) {
		throw new Error(
			`Expected number of hashes to match number of autogenerated files:\n\n` +
			`Expected number: ${sz1}\n` +
			`Actual number  : ${sz2}\n`
		)
	}

	for (const path in lockFileData.autogeneratedFiles) {
		const expectedHash = lockFileData.autogeneratedFiles[path].hash

		if (!session.state.filesToAutogenerate.has(path)) {
			throw new Error(
				`No hash entry for auto generated file '${path}'.`
			)
		}

		const actualHash = session.state.filesToAutogenerate.get(path)!.outputHash

		if (expectedHash !== actualHash) {
			throw new Error(
				`Hash mismatch`
			)
		}
	}
}

async function executeStep(
	session: InternalSession
) : Promise<Autogenerate> {
	await createAutogeneratedFiles(session)

	if (session.options.isCIEnvironment) {
		await checkAutogeneratedFilesCI(session)
	}

	session.state.projectDirectoryEntries = await scandir(
		path.join(session.projectRoot, "project")
	)

	return {
		preprocess: async function() {
			return await preprocess.runStep(session)
		}
	}
}

export default defineStep("autogenerate", executeStep)
