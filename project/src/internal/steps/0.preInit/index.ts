import type {PreInit} from "#~src/Steps.ts"
import {defineStepChecked} from "../defineStepChecked.ts"
import clean from "../1.clean/index.ts"
import {runHook} from "#~src/internal/session/runHook.ts"
import {writeBoilerplateFiles} from "./writeBoilerplateFiles.ts"
import {writeGitIgnoreFile} from "./writeGitIgnoreFile.ts"
import {writeAtomicFile} from "@anio-software/pkg.node-fs"
import {sortProjectPackageJSON} from "./sortProjectPackageJSON.ts"
import {validateProjectPackageJSON} from "./validateProjectPackageJSON.ts"
import path from "node:path"

const executeStep: PreInit = async function(session) {
	const {projectConfig} = session
	const projectPackageJSON = session.publicAPI.project.packageJSON

	for (const diagnostic of validateProjectPackageJSON(projectPackageJSON)) {
		const {severity, id, message} = diagnostic

		session.emitMessage(severity, id, message)
	}

	await writeAtomicFile(
		path.join(session.projectRoot, "package.json"),
		await sortProjectPackageJSON(projectPackageJSON)
	)

	await writeBoilerplateFiles(session)
	await writeGitIgnoreFile(session)

	//
	// give target a chance to register auto files
	//
	await runHook(session, "preInitialize")

	//
	// add auto files from config to session
	//
	if (projectConfig.autogeneratedFiles) {
		for (const file of projectConfig.autogeneratedFiles) {
			session.publicAPI.addAutogeneratedFile(file)
		}
	}

	session.state.finalized = true

	return {
		clean: async function() {
			return await clean.runStep(session)
		}
	}
}

export default defineStepChecked("preInit", executeStep)
